# FROM python:3.7 as app
FROM tiangolo/uwsgi-nginx-flask:python3.8

# Install curl, node, & yarn
RUN apt-get install -y curl \
    && curl -sL https://deb.nodesource.com/setup_12.x | bash - \
    && apt-get install -y nodejs \
    && curl -o- -L https://npmjs.org/install.sh | bash

WORKDIR /app/backend

# Install Python dependencies
COPY ./backend/requirements.txt /app/backend/
RUN pip3 install --upgrade pip -r requirements.txt

# Install JS dependencies
WORKDIR /app/frontend

COPY ./frontend/package.json ./frontend/package-lock.json /app/frontend/
RUN npm install

# Add the rest of the code
COPY . /app/
COPY ./backend/scripts/ /app/
# Build static files
RUN npm run build

# Have to move all static files other than index.html to root/
# for whitenoise middleware
# WORKDIR /app/frontend/build

# RUN ["mkdir", "root && mv *.ico *.js *.json root"]

# Collect static files
# RUN ["mkdir", "/app/backend/staticfiles"]

COPY ./nginx/nginx.conf /etc/nginx/conf.d/default.conf

WORKDIR /app

EXPOSE $PORT

# RUN ["chmod", "+x", "/app/entrypoint.sh"]
# ENTRYPOINT ["/app/entrypoint.sh"]

CMD gunicorn config.wsgi:application --bind 0.0.0.0:8000 --daemon && \
        npm --prefix ./frontent/ run serve
    #   sed -i -e 's/$PORT/'"$PORT"'/g' /etc/nginx/conf.d/default.conf && \

# !Note: TEST !
# build
# FROM node:15.7.0-alpine3.10 as build-vue

# WORKDIR /app

# ENV PATH /app/node_modules/.bin:$PATH

# COPY ./frontend/package*.json ./

# RUN npm install

# COPY ./frontend .

# RUN npm run build

# # production
# # RUN adduser communoservice --disabled-password
# # USER communoservice
# FROM nginx:stable-alpine as production

# WORKDIR /app

# RUN apk update && apk add --no-cache python3 && \
#     python3 -m ensurepip && \
#     rm -r /usr/lib/python*/ensurepip && \
#     pip3 install --upgrade pip setuptools && \
#     if [ ! -e /usr/bin/pip ]; then ln -s pip3 /usr/bin/pip ; fi && \
#     if [[ ! -e /usr/bin/python ]]; then ln -sf /usr/bin/python3 /usr/bin/python; fi && \
#     rm -r /root/.cache

# # RUN apk update && apk add postgresql-dev gcc python3-dev musl-dev
# # RUN apk add postgresql-dev gcc python3-dev musl-dev

# COPY --from=build-vue /app/dist /usr/share/nginx/html
# COPY ./nginx/nginx.conf /etc/nginx/conf.d/default.conf
# COPY ./backend/requirements.txt .

# RUN pip install -r requirements.txt
# RUN pip install gunicorn

# COPY ./backend .

# CMD gunicorn -b 0.0.0.0:5000 app:app --daemon && \
#       sed -i -e 's/$PORT/'"$PORT"'/g' /etc/nginx/conf.d/default.conf && \
#       nginx -g 'daemon off;'
