# FROM python:3.9 as app

# # Install curl, node, & yarn
# RUN apt-get install -y curl \
#     && curl -sL https://deb.nodesource.com/setup_12.x | bash - \
#     && apt-get install -y nodejs \
#     && curl -o- -L https://npmjs.org/install.sh | bash

# WORKDIR /app/backend

# # Install Python dependencies
# COPY ./backend/requirements.txt /app/backend/
# RUN pip3 install --upgrade pip -r requirements.txt

# # Install JS dependencies
# WORKDIR /app/frontend

# # COPY ./frontend/package.json ./frontend/package-lock.json /app/frontend/
# COPY ./frontend/package.json /app/frontend/
# RUN npm install

# # Serveur
# # RUN npm install -g http-server

# # Add the rest of the code
# COPY . /app/
# COPY ./backend/scripts/ /app/
# # Build static files
# RUN npm run build

# # Have to move all static files other than index.html to root/
# # for whitenoise middleware
# # WORKDIR /app/frontend/build

# # RUN ["mkdir", "root && mv *.ico *.js *.json root"]

# # Collect static files
# # RUN ["mkdir", "/app/backend/staticfiles"]

# # COPY ./nginx/nginx.conf /etc/nginx/conf.d/default.conf

# WORKDIR /app

# EXPOSE $PORT

# RUN ["chmod", "+x", "/app/entrypoint.sh"]
# ENTRYPOINT ["/app/entrypoint.sh"]


# ! NOTE: WORKSSSSSSSSSSSS
# CMD gunicorn config.wsgi:application --bind 0.0.0.0:8080 --daemon && \
#         npm run serve


# !Note: TEST !
# python
FROM python:3.9 as app

# RUN adduser communoservice --disabled-password
# USER communoservice

WORKDIR /app

ENV PYTHONFAULTHANDLER=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONHASHSEED=random \
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100

# Install Python dependencies
# COPY ./backend/requirements.txt /app
# RUN pip3 install --upgrade pip -r requirements.txt

# Add the rest of the code
COPY ./backend/ /app/
# COPY ./backend/scripts/ /app/

# RUN ["chmod", "+x", "/app/entrypoint.sh"]
# ENTRYPOINT ["/app/entrypoint.sh"]

# build
FROM node:15.7.0-alpine3.10 as vue

# RUN adduser communoservice --disabled-password
# USER communoservice

WORKDIR /app

ENV PATH /app/node_modules/.bin:$PATH

# COPY ./frontend/package*.json ./

# RUN npm install

COPY ./frontend/ .

RUN npm install
RUN npm run build

# # production
# # RUN adduser communoservice --disabled-password
# # USER communoservice
FROM nginx:stable-alpine as production

WORKDIR /app

# RUN apk update && apk add --no-cache python3 && \
#     python3 -m ensurepip && \
#     rm -r /usr/lib/python*/ensurepip && \
#     pip3 install --upgrade pip setuptools && \
#     if [ ! -e /usr/bin/pip ]; then ln -s pip3 /usr/bin/pip ; fi && \
#     if [[ ! -e /usr/bin/python ]]; then ln -sf /usr/bin/python3 /usr/bin/python; fi && \
#     rm -r /root/.cache

# # RUN apk update && apk add postgresql-dev gcc python3-dev musl-dev
# # RUN apk add postgresql-dev gcc python3-dev musl-dev

RUN apk add python3 && apk add py3-pip
RUN pip3 install gunicorn

COPY --from=vue /app/dist /tmp/share/nginx/html
COPY --from=app /app .
RUN rm /etc/nginx/conf.d/default.conf
COPY ./nginx/nginx.conf /etc/nginx/conf.d
# COPY ./nginx/nginx.conf /etc/nginx/conf.d/default.conf
# COPY ./backend/requirements.txt .

# COPY --from=app /app .
RUN adduser communoservice --disabled-password
USER communoservice

# RUN pip3 install --upgrade pip -r requirements.txt

RUN ["chmod", "+x", "entrypoint.sh"]
ENTRYPOINT ["entrypoint.sh"]

# CMD gunicorn -b 0.0.0.0:8080 config.wsgi:application --daemon && \
#       sed -i -e 's/$PORT/'"$PORT"'/g' /etc/nginx/conf.d/default.conf && \
#       nginx -g 'daemon off;'
